# Sky Take-Out - Food Delivery Management System

A comprehensive software solution designed for catering enterprises, featuring separate management and user interfaces for streamlined food delivery operations.

## üöÄ Project Overview

Sky Take-Out is a modern food delivery platform that implements a complete ordering system where customers can place orders through a user-friendly interface while restaurant management can efficiently process and manage orders through an administrative dashboard.

The project follows a **frontend-backend separation architecture** for optimal scalability and maintainability.

## üèóÔ∏è Project Architecture

### User Layer
- **Management Portal**: Web-based interface using HTML, CSS, JavaScript, ElementUI, Apache, and ECharts
- **Customer App**: WeChat Mini Program for mobile ordering experience

### Gateway Layer
- **Nginx**: High-performance web server for frontend deployment and load balancing

### Application Layer
- **Spring Boot**: Simplified configuration and rapid development framework
- **Spring MVC**: MVC pattern implementation for web applications
- **Spring Task**: Scheduled task management
- **HttpClient**: HTTP communication library for API requests
- **Spring Cache**: Caching solution to reduce database load
- **JWT**: Secure token-based authentication
- **Alibaba Cloud OSS**: Cloud storage for images and media files
- **Knife4j (Swagger)**: API documentation and testing interface
- **Apache POI**: Microsoft Office file processing
- **WebSocket**: Real-time bidirectional communication

### Data Layer
- **MySQL**: Primary relational database for persistent storage
- **Redis**: In-memory cache for improved performance
- **MyBatis**: SQL mapping framework for database operations
- **PageHelper**: Pagination support for query results
- **Spring Data Redis**: Simplified Redis integration

### Development Tools
- **Git**: Version control and collaborative development
- **Maven**: Project management and dependency resolution
- **JUnit**: Unit testing framework
- **Postman**: API testing and development tool

## üìÅ Module Structure

| **Module** | **Description** |
|------------|----------------|
| sky-take-out | Maven parent project managing dependency versions and aggregating sub-modules |
| sky-common | Common utilities, constants, exceptions, and shared classes |
| sky-pojo | Data objects including entities, DTOs, VOs, and POJOs |
| sky-server | Backend services with controllers, services, mappers, and configurations |

### sky-common Module
| Package | Description |
|---------|-------------|
| constant | Application constants |
| context | Context management classes |
| enumeration | Project enumeration types |
| exception | Custom exception classes |
| json | JSON conversion utilities |
| properties | Spring Boot configuration properties |
| result | Response wrapper classes |
| utils | Common utility functions |

### sky-pojo Module
| Package | Description |
|---------|-------------|
| Entity | Database entity mappings |
| DTO | Data Transfer Objects for layer communication |
| VO | View Objects for frontend presentation |
| POJO | Plain Old Java Objects with getters/setters |

### sky-server Module
| Package | Description |
|---------|-------------|
| config | Configuration classes |
| controller | REST API controllers |
| interceptor | Request interceptors |
| mapper | MyBatis mapper interfaces |
| service | Business logic services |
| SkyApplication | Application startup class |

## ‚ú® Features

### üîß Management Portal
| Module | Description |
|--------|-------------|
| Login/Logout | Secure authentication for internal staff |
| Employee Management | CRUD operations for staff accounts with role-based access |
| Category Management | Manage dish and combo categories |
| Dish Management | Complete dish lifecycle management including availability control |
| Combo Management | Package deal management with pricing and availability |
| Order Management | Order processing, tracking, and reporting with downloadable reports |
| Data Analytics | Business intelligence dashboard with revenue, user metrics, and order statistics |

### üì± Customer Application
| Module | Description |
|--------|-------------|
| WeChat Login | Seamless authentication through WeChat authorization |
| Menu Browsing | Intuitive category-based dish and combo selection |
| Shopping Cart | Full cart management with add, remove, and clear functionality |
| Order Payment | Secure checkout and payment processing |
| User Profile | Personal information management, address book, and order history |

## üõ†Ô∏è Technology Stack

**Backend:**
- Java 8+
- Spring Boot 2.x
- Spring MVC
- Spring Security
- MyBatis
- MySQL 8.0
- Redis 6.x
- JWT Authentication

**Frontend:**
- HTML5, CSS3, JavaScript (ES6+)
- ElementUI
- ECharts
- WeChat Mini Program Framework

**Infrastructure:**
- Nginx (Load Balancer & Web Server)
- Alibaba Cloud OSS (Object Storage)
- Docker (Containerization)

**Development & Testing:**
- Maven (Build Tool)
- Git (Version Control)
- JUnit (Unit Testing)
- Postman (API Testing)
- Knife4j (API Documentation)

## üöÄ Quick Start

### Prerequisites
- Java 8 or higher
- MySQL 8.0+
- Redis 6.0+
- Maven 3.6+
- Node.js 14+ (for frontend development)


## üìà Performance Optimization

- **Redis Caching**: Frequently accessed data cached in Redis
- **Database Indexing**: Optimized queries with proper indexing
- **Connection Pooling**: Efficient database connection management
- **Lazy Loading**: On-demand data loading to reduce memory usage
- **CDN Integration**: Static assets served through CDN

## ü§ù Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## üìù API Endpoints

### Authentication
```
POST /admin/employee/login     # Admin login
POST /user/user/login         # User login via WeChat
```

### Management Portal
```
GET    /admin/employee        # List employees
POST   /admin/employee        # Create employee
PUT    /admin/employee        # Update employee
GET    /admin/category        # List categories
POST   /admin/dish           # Create dish
GET    /admin/order          # List orders
```

### Customer Application
```
GET    /user/shop/status      # Shop status
GET    /user/category/list    # List categories
POST   /user/shoppingcart/add # Add to cart
POST   /user/order/submit     # Submit order
```

